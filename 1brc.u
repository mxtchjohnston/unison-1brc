brc.main : '{IO, Exception} ()
brc.main = runStream

brc.runStream : '{IO, Exception} ()
brc.runStream = do
  fileHandle = open (FilePath "Weather Stations.csv") Read

  loop : Map Text [Float] -> Handle -> Map Text [Float]
  loop table _handle = 
    match isEOF _handle with
      true -> table
      false ->
        line = getLine _handle
        list = lib.base.Text.split ?; line
        city = (List.head list) |> getOrBug "Could not find city"
        temperature = Float.fromText (List.at 1 list |> getOrBug "Could not find temperature") |> getOrBug "Could not convert to float"
        value = match Map.get city table with
          Some x -> x List.++ [temperature]
          None -> [temperature]
        loop (Map.insert city value table) _handle
   
  table = loop Map.empty fileHandle
  printLine (Map.size table |> Nat.toText)
  close fileHandle



brc.extractCities : '{IO, Exception} ()
brc.extractCities = do
  contents = 
    (brc.readFile "Weather Stations.csv") 
      |> lib.base.Text.split ?\n
      |> List.map (lib.base.Text.split ?; >> List.head >> getOrBug "Could not find city")
      |> lib.base.data.List.distinct
      |> List.sort
      |> Text.join "\n"
  writeFileUtf8 (FilePath "cities.txt") (contents)


brc.run : '{IO, Exception} ()
brc.run = do
  contents = 
    (brc.readFile "Weather Stations.csv") 
      |> lib.base.Text.split ?\n 
      |> List.map (lib.base.Text.split ?; >> brc.listToTuple)
      |> lib.base.data.Map.fromListWith (++)
      |> Map.map brc.calculate
      |> Map.toList
      |> List.map brc.toText
      |> Text.join "\n"
  printLine (contents)

brc.toText : (Text, (Float, Float, Float)) -> Text
brc.toText t = 
  match t with  
    (name, (min, mean, max)) -> lib.base.Text.join "" [name, "=", (Float.toText min),"/", (Float.toText mean),"/", (Float.toText max), ", "]

brc.mean : [Float] -> Float
brc.mean list = 
  numerator = Float.sum list
  denominator = Float.fromNat (List.size list)
  numerator / denominator

brc.calculate : [Float] -> (Float, Float, Float)
brc.calculate temperature = 
  min = List.minimum temperature |> getOrBug "Could not find minimum"
  mean = brc.mean temperature
  max = List.maximum temperature |> getOrBug "Could not find maximum"
  (min, mean, max)
  

brc.listToTuple : [Text] -> (Text, [Float])
brc.listToTuple = 
  cases 
    [] -> (bug "Empty list")
    [x] -> (bug "List with only one element")
    [x, y] -> Tuple.pair x [(Float.fromText(y) |> getOrBug "Could not convert to float")]
    _ -> bug "List with more than two elements"

 

brc.readFile : Text -> {IO, Exception} Text
brc.readFile = readFileUtf8 << FilePath