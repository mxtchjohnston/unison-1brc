brc.runInPlace : '{IO, Exception} ()
brc.runInPlace =
  do
    path = match !getArgs with
      []  -> FilePath "Weather Stations.csv"
      [x] -> FilePath x
      _   -> bug "Too many arguments"
    file = open path Read
    loop : Map Text Measurement -> Handle -> Map Text Measurement
    loop tree file =
      match isEOF file with
        true -> tree
        false ->
          line = getLine file
          pair = lib.base.Text.split ?; line
          city = List.head pair |> getOrBug "Could not find city"
          temperature =
            List.at 1 pair
              |> getOrBug "Could not find temperature"
              |> Float.fromText
              |> getOrBug "Could not convert to float"
          value = match Map.get city tree with
            Some x -> updateMeasurement x temperature
            None   -> Measurement "" temperature temperature temperature
          loop (Map.insert city value tree) file
    tree = loop Map.empty file
    (Map.get "Vancouver" tree) |> toDebugText |> printLine
    ()

experiment : '{IO, Exception} ()
experiment =
  do
    semicolon = ?;
    newline = ?\n
    file =
      readFileUtf8
        <| FilePath "Weather Stations.csv"
        |> lib.base.Text.split newline
    ()

structural type Measurement
  = { city : Text, min : Float, max : Float, mean : Float }

updateMeasurement : Measurement -> Float -> Measurement
updateMeasurement measurement value =
  use Float + / < >
  min =
    if value < Measurement.min measurement then value
    else Measurement.min measurement
  max =
    if value > Measurement.max measurement then value
    else Measurement.max measurement
  mean = Measurement.mean measurement + value / 2.0
  Measurement.Measurement "" min max mean

Text.toNat.doc =
  {{
  Turns some text into a Natural Number, adds padding to the end of the text to
  ensure that the number is 8 bytes long
  }}

Text.toNat : Text -> Nat
Text.toNat text =
  use Text ++
  fromBytesLittleEndian (Text.toUtf8 (text ++ "        "))

Text.fromNat.doc = {{ Does not work properly for text over 8 characters long }}

Text.fromNat : Nat -> Text
Text.fromNat nat = fromUtf8 (toBytesLittleEndian nat) |> trim

> toOptional! do Text.toNat "Vancouver"

> toOptional! do Text.toNat "Vancouve"

---- Anything below this line is ignored by Unison.


experiment: '{IO, Exception} ()
experiment = do
  semicolon = ?;
  newline = ?\n
  file = readFileUtf8 <| FilePath "Weather Stations.csv" |> Text.split newline
  
  ()


structural type Measurement = {
  city: Text,
  min: Float,
  max: Float,
  mean: Float
}

updateMeasurement : Measurement -> Float -> Measurement
updateMeasurement measurement value =
  min = if value < Measurement.min measurement then value else Measurement.min measurement
  max = if value > Measurement.max measurement then value else Measurement.max measurement
  mean = (Measurement.mean measurement + value) / 2.0
  Measurement "" min max mean

-- updateMeasurement (Measurement 3.0 4.0 3.5) 10.0

--> Abort.toOptional! do ( fromBytesLittleEndian (Text.toUtf8 "Ērer Sātā"))
--> Abort.toOptional! do Text.toNat "Vancouver"

{{ Turns some text into a Natural Number, adds padding to the end of the text to ensure that the number is 8 bytes long }}
Text.toNat : Text -> Nat
Text.toNat text = fromBytesLittleEndian (Text.toUtf8 (text ++ "        "))

{{ Does not work properly for text over 8 characters long }}
Text.fromNat : Nat -> Text
Text.fromNat nat = Text.fromUtf8 (toBytesLittleEndian nat) |> Text.trim

--> catch do Text.fromNat (Abort.toBug do Text.toNat "1234567890")

> toOptional! do Text.toNat "Vancouver"
> toOptional! do Text.toNat "Vancouve"
